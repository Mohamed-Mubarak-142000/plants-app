generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//CREATE MODEL USER
model User {
  id            String          @id @default(cuid())
  name_Ar       String
  name_En       String
  email         String          @unique
  password      String
  image         String?
  phone         String?
  lang          String?
  lat           String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          String
  orders        Order[]
  orderQuantity OrderQuantity[]
}

model Product {
  id             String          @id @default(cuid())
  name_ar        String
  name_en        String
  description_ar String
  description_en String
  image          String
  order          Int
  basePrice      Float
  offerPrice     Float
  stock          Int
  category       Category        @relation(fields: [categoryId], references: [id])
  stands         Stand[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  categoryId     String
  orderQuantity  OrderQuantity[]
}

model Order {
  id          String          @id @default(cuid())
  paid        Boolean         @default(false)
  subtotal    Float
  deliveryFee Float
  total       Float
  userEmail   String
  phone       String
  lat         String
  lang        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  products    OrderQuantity[]
  User        User?           @relation(fields: [userId], references: [id])
  userId      String?
}

model OrderQuantity {
  id        String   @id @default(cuid())
  quantity  Int
  Order     Order[]
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Category {
  id      String    @id @default(cuid())
  name_ar String
  name_en String
  Product Product[]
}

model Stand {
  id      String @id @default(cuid())
  name_ar String
  name_en String

  description_ar String
  description_en String

  image      String
  basePrice  Float
  offerPrice Float

  stock Int

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}
