generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  SELLER
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(cuid())
  nameAr        String
  nameEn        String
  email         String          @unique
  password      String
  phone         String
  image         String?
  lang          String?         @default("ar")
  lat           String?         @default("")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          UserRole
  orders        Order[]
  orderQuantity OrderQuantity[]
  Account       Account[]
  Session       Session[]
}

model Product {
  id            String          @id @default(cuid())
  nameAr        String
  nameEn        String
  descriptionAr String
  descriptionEn String
  image         String
  order         Int?
  basePrice     Float
  offerPrice    Float?
  stock         Int
  categoryId    String
  category      Category        @relation(fields: [categoryId], references: [id])
  stands        Stand[]
  orderQuantity OrderQuantity[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Order {
  id          String   @id @default(cuid())
  paid        Boolean  @default(false)
  subtotal    Float
  deliveryFee Float
  total       Float
  userEmail   String
  phone       String
  lat         String
  lang        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId   String
  user     User            @relation(fields: [userId], references: [id])
  products OrderQuantity[]
}

model OrderQuantity {
  id       String @id @default(cuid())
  quantity Int

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Category {
  id       String    @id @default(cuid())
  nameAr   String
  nameEn   String
  products Product[]
}

model Stand {
  id            String   @id @default(cuid())
  nameAr        String
  nameEn        String
  descriptionAr String
  descriptionEn String
  image         String
  basePrice     Float
  offerPrice    Float
  stock         Int
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
